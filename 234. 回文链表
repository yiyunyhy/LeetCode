#1.
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        if head == None or head.next == None: 
            return True 
        target = [] 
        while head: 
            target.append(head.val) 
            head=head.next 
            p = (len(target)-1)//2+1 
            q = (len(target))//2 
        return target[0:p]==target[q:len(target)][::-1]

#2.
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        fast = slow = ListNode(0)
        fast = slow = head
        stack = []
        
        while fast and fast.next:
            stack.append(slow.val)
            slow = slow.next
            fast = fast.next.next
            
        if fast:
            slow = slow.next
        
        while slow:
            top = stack.pop()
            
            if top != slow.val:
                return False
            slow = slow.next
        return True
