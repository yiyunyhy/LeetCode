#1.
class Solution:
    def transpose(self, A: List[List[int]]) -> List[List[int]]:
        R, C = len(A), len(A[0])
        ans = [[None] * R for _ in range(C)]
        for r, row in enumerate(A):
            for c, val in enumerate(row):
                ans[c][r] = val
        return ans
#2.
class Solution:
    def transpose(self, A: List[List[int]]) -> List[List[int]]:
        r, c = len(A), len(A[0])
        
        i, j = 0, 0
        B = []
        for _ in range(c):
            B += [[None] * r]
            
        while i < c:
            while j < r:
                B[i][j] = A[j][i]
                j += 1
            i += 1
            j = 0
        return B
